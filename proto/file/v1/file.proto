syntax = "proto3";

package file.v1;

import "google/protobuf/timestamp.proto";
import "buf/validate/validate.proto";

option go_package = "github.com/samarthasthan/cloud-storage-commons/gen/go/file/v1;filev1";

// ---------------------------------------------------------------------------
//  Service: only the multipart-upload life-cycle endpoints you requested.
// ---------------------------------------------------------------------------
service FileService {
  // STEP 1 ────────────────────────────────────────────────────────────────
  // Register a new file, start an S3 multipart upload, and hand back
  // the IDs the client needs for the next steps.
  rpc InitiateMultipartUpload (InitiateMultipartUploadRequest)
      returns (InitiateMultipartUploadResponse);

  // STEP 2 (repeat per part) ──────────────────────────────────────────────
  rpc GetPresignedUploadPartURL (GetPresignedUploadPartURLRequest)
      returns (GetPresignedUploadPartURLResponse);

  // STEP 3 ────────────────────────────────────────────────────────────────
  rpc CompleteMultipartUpload (CompleteMultipartUploadRequest)
      returns (CompleteMultipartUploadResponse);

  // Optional clean-up ─────────────────────────────────────────────────────
  rpc AbortMultipartUpload (AbortMultipartUploadRequest)
      returns (AbortMultipartUploadResponse);
}

// ---------------------------------------------------------------------------
//  Messages
// ---------------------------------------------------------------------------

// ===== 1. Initiate =========================================================
message InitiateMultipartUploadRequest {
  string name         = 1 [(buf.validate.field).string.min_len = 1];
  string content_type = 2;                                              // optional
  int64  size         = 3 [(buf.validate.field).int64.gt = 0];          // bytes
}

message InitiateMultipartUploadResponse {
  string file_id   = 1;   // UUID – primary key in Files table
  string upload_id = 2;   // S3 multipart UploadID
  string key       = 3;   // S3 object key chosen by the server
}

// ===== 2. Presign part =====================================================
message GetPresignedUploadPartURLRequest {
  string upload_id       = 1 [(buf.validate.field).string.min_len = 1];
  int32  part_number   = 2 [(buf.validate.field).int32.gt = 0];
  int32  expires_secs  = 3 [(buf.validate.field).int32.gt = 0]; // e.g. 900 = 15 min
}

message GetPresignedUploadPartURLResponse {
  string presigned_url = 1;
}

// ===== 3. Complete upload ==================================================
message CompleteMultipartUploadRequest {
  string upload_id = 1 [(buf.validate.field).string.min_len = 1];
  repeated CompletedPart parts = 2 [(buf.validate.field).repeated.min_items = 1];
}

message CompletedPart {
  int32  part_number = 1 [(buf.validate.field).int32.gt = 0];
  string etag        = 2 [(buf.validate.field).string.min_len = 1];
}

message CompleteMultipartUploadResponse {
  FileMetadata file = 1;   // fully populated metadata row
}

// ===== Abort upload ========================================================
message AbortMultipartUploadRequest {
  string upload_id = 1 [(buf.validate.field).string.min_len = 1];
}
message AbortMultipartUploadResponse {}   // empty on success

// ---------------------------------------------------------------------------
//  DTO mirroring the Files table (handy for future RPCs too)
// ---------------------------------------------------------------------------
message FileMetadata {
  string id           = 1;  // Files.Id
  string owner_id     = 2;  // Files.Owner_Id
  string name         = 3;
  string content_type = 4;
  int64  size         = 5;
  bool   is_public    = 6;
  string share_id     = 7;  // nullable UUID – present only if public
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp updated_at = 9;
  google.protobuf.Timestamp deleted_at = 10; // optional
}
