// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: file/v1/file.proto

package filev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	FileService_InitiateMultipartUpload_FullMethodName   = "/file.v1.FileService/InitiateMultipartUpload"
	FileService_GetPresignedUploadPartURL_FullMethodName = "/file.v1.FileService/GetPresignedUploadPartURL"
	FileService_CompleteMultipartUpload_FullMethodName   = "/file.v1.FileService/CompleteMultipartUpload"
	FileService_AbortMultipartUpload_FullMethodName      = "/file.v1.FileService/AbortMultipartUpload"
	FileService_CreateFolder_FullMethodName              = "/file.v1.FileService/CreateFolder"
	FileService_ListFilesByParent_FullMethodName         = "/file.v1.FileService/ListFilesByParent"
	FileService_ToggleFavorite_FullMethodName            = "/file.v1.FileService/ToggleFavorite"
	FileService_DeleteFile_FullMethodName                = "/file.v1.FileService/DeleteFile"
	FileService_RestoreFile_FullMethodName               = "/file.v1.FileService/RestoreFile"
	FileService_Rename_FullMethodName                    = "/file.v1.FileService/Rename"
	FileService_MarkAsIsPublic_FullMethodName            = "/file.v1.FileService/MarkAsIsPublic"
	FileService_MarkAsNotIsPublic_FullMethodName         = "/file.v1.FileService/MarkAsNotIsPublic"
	FileService_AddAccessEmail_FullMethodName            = "/file.v1.FileService/AddAccessEmail"
	FileService_GetAccessStatus_FullMethodName           = "/file.v1.FileService/GetAccessStatus"
	FileService_RemoveSingleAccessEmail_FullMethodName   = "/file.v1.FileService/RemoveSingleAccessEmail"
	FileService_RemoveAllAccessEmails_FullMethodName     = "/file.v1.FileService/RemoveAllAccessEmails"
	FileService_GetAccountSize_FullMethodName            = "/file.v1.FileService/GetAccountSize"
	FileService_PermanentlyDeleteFile_FullMethodName     = "/file.v1.FileService/PermanentlyDeleteFile"
	FileService_ViewFile_FullMethodName                  = "/file.v1.FileService/ViewFile"
)

// FileServiceClient is the client API for FileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServiceClient interface {
	InitiateMultipartUpload(ctx context.Context, in *InitiateMultipartUploadRequest, opts ...grpc.CallOption) (*InitiateMultipartUploadResponse, error)
	GetPresignedUploadPartURL(ctx context.Context, in *GetPresignedUploadPartURLRequest, opts ...grpc.CallOption) (*GetPresignedUploadPartURLResponse, error)
	CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadRequest, opts ...grpc.CallOption) (*CompleteMultipartUploadResponse, error)
	AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadRequest, opts ...grpc.CallOption) (*AbortMultipartUploadResponse, error)
	CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResponse, error)
	ListFilesByParent(ctx context.Context, in *ListFilesByParentRequest, opts ...grpc.CallOption) (*ListFilesByParentResponse, error)
	ToggleFavorite(ctx context.Context, in *ToggleFavoriteRequest, opts ...grpc.CallOption) (*ToggleFavoriteResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	RestoreFile(ctx context.Context, in *RestoreFileRequest, opts ...grpc.CallOption) (*RestoreFileResponse, error)
	Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error)
	MarkAsIsPublic(ctx context.Context, in *MarkAsIsPublicRequest, opts ...grpc.CallOption) (*MarkAsIsPublicResponse, error)
	MarkAsNotIsPublic(ctx context.Context, in *MarkAsNotIsPublicRequest, opts ...grpc.CallOption) (*MarkAsNotIsPublicResponse, error)
	AddAccessEmail(ctx context.Context, in *AddAccessEmailRequest, opts ...grpc.CallOption) (*AddAccessEmailResponse, error)
	GetAccessStatus(ctx context.Context, in *GetAccessStatusRequest, opts ...grpc.CallOption) (*GetAccessStatusResponse, error)
	RemoveSingleAccessEmail(ctx context.Context, in *RemoveSingleAccessEmailRequest, opts ...grpc.CallOption) (*RemoveSingleAccessEmailResponse, error)
	RemoveAllAccessEmails(ctx context.Context, in *RemoveAllAccessEmailsRequest, opts ...grpc.CallOption) (*RemoveAllAccessEmailsResponse, error)
	GetAccountSize(ctx context.Context, in *GetAccountSizeRequest, opts ...grpc.CallOption) (*GetAccountSizeResponse, error)
	PermanentlyDeleteFile(ctx context.Context, in *PermanentlyDeleteFileRequest, opts ...grpc.CallOption) (*PermanentlyDeleteFileResponse, error)
	ViewFile(ctx context.Context, in *ViewFileRequest, opts ...grpc.CallOption) (*ViewFileResponse, error)
}

type fileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServiceClient(cc grpc.ClientConnInterface) FileServiceClient {
	return &fileServiceClient{cc}
}

func (c *fileServiceClient) InitiateMultipartUpload(ctx context.Context, in *InitiateMultipartUploadRequest, opts ...grpc.CallOption) (*InitiateMultipartUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitiateMultipartUploadResponse)
	err := c.cc.Invoke(ctx, FileService_InitiateMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetPresignedUploadPartURL(ctx context.Context, in *GetPresignedUploadPartURLRequest, opts ...grpc.CallOption) (*GetPresignedUploadPartURLResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPresignedUploadPartURLResponse)
	err := c.cc.Invoke(ctx, FileService_GetPresignedUploadPartURL_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CompleteMultipartUpload(ctx context.Context, in *CompleteMultipartUploadRequest, opts ...grpc.CallOption) (*CompleteMultipartUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CompleteMultipartUploadResponse)
	err := c.cc.Invoke(ctx, FileService_CompleteMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) AbortMultipartUpload(ctx context.Context, in *AbortMultipartUploadRequest, opts ...grpc.CallOption) (*AbortMultipartUploadResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AbortMultipartUploadResponse)
	err := c.cc.Invoke(ctx, FileService_AbortMultipartUpload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) CreateFolder(ctx context.Context, in *CreateFolderRequest, opts ...grpc.CallOption) (*CreateFolderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateFolderResponse)
	err := c.cc.Invoke(ctx, FileService_CreateFolder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ListFilesByParent(ctx context.Context, in *ListFilesByParentRequest, opts ...grpc.CallOption) (*ListFilesByParentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListFilesByParentResponse)
	err := c.cc.Invoke(ctx, FileService_ListFilesByParent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ToggleFavorite(ctx context.Context, in *ToggleFavoriteRequest, opts ...grpc.CallOption) (*ToggleFavoriteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleFavoriteResponse)
	err := c.cc.Invoke(ctx, FileService_ToggleFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, FileService_DeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RestoreFile(ctx context.Context, in *RestoreFileRequest, opts ...grpc.CallOption) (*RestoreFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RestoreFileResponse)
	err := c.cc.Invoke(ctx, FileService_RestoreFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) Rename(ctx context.Context, in *RenameRequest, opts ...grpc.CallOption) (*RenameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RenameResponse)
	err := c.cc.Invoke(ctx, FileService_Rename_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) MarkAsIsPublic(ctx context.Context, in *MarkAsIsPublicRequest, opts ...grpc.CallOption) (*MarkAsIsPublicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAsIsPublicResponse)
	err := c.cc.Invoke(ctx, FileService_MarkAsIsPublic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) MarkAsNotIsPublic(ctx context.Context, in *MarkAsNotIsPublicRequest, opts ...grpc.CallOption) (*MarkAsNotIsPublicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MarkAsNotIsPublicResponse)
	err := c.cc.Invoke(ctx, FileService_MarkAsNotIsPublic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) AddAccessEmail(ctx context.Context, in *AddAccessEmailRequest, opts ...grpc.CallOption) (*AddAccessEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddAccessEmailResponse)
	err := c.cc.Invoke(ctx, FileService_AddAccessEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetAccessStatus(ctx context.Context, in *GetAccessStatusRequest, opts ...grpc.CallOption) (*GetAccessStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccessStatusResponse)
	err := c.cc.Invoke(ctx, FileService_GetAccessStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RemoveSingleAccessEmail(ctx context.Context, in *RemoveSingleAccessEmailRequest, opts ...grpc.CallOption) (*RemoveSingleAccessEmailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveSingleAccessEmailResponse)
	err := c.cc.Invoke(ctx, FileService_RemoveSingleAccessEmail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) RemoveAllAccessEmails(ctx context.Context, in *RemoveAllAccessEmailsRequest, opts ...grpc.CallOption) (*RemoveAllAccessEmailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveAllAccessEmailsResponse)
	err := c.cc.Invoke(ctx, FileService_RemoveAllAccessEmails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) GetAccountSize(ctx context.Context, in *GetAccountSizeRequest, opts ...grpc.CallOption) (*GetAccountSizeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAccountSizeResponse)
	err := c.cc.Invoke(ctx, FileService_GetAccountSize_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) PermanentlyDeleteFile(ctx context.Context, in *PermanentlyDeleteFileRequest, opts ...grpc.CallOption) (*PermanentlyDeleteFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PermanentlyDeleteFileResponse)
	err := c.cc.Invoke(ctx, FileService_PermanentlyDeleteFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileServiceClient) ViewFile(ctx context.Context, in *ViewFileRequest, opts ...grpc.CallOption) (*ViewFileResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ViewFileResponse)
	err := c.cc.Invoke(ctx, FileService_ViewFile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileServiceServer is the server API for FileService service.
// All implementations must embed UnimplementedFileServiceServer
// for forward compatibility.
type FileServiceServer interface {
	InitiateMultipartUpload(context.Context, *InitiateMultipartUploadRequest) (*InitiateMultipartUploadResponse, error)
	GetPresignedUploadPartURL(context.Context, *GetPresignedUploadPartURLRequest) (*GetPresignedUploadPartURLResponse, error)
	CompleteMultipartUpload(context.Context, *CompleteMultipartUploadRequest) (*CompleteMultipartUploadResponse, error)
	AbortMultipartUpload(context.Context, *AbortMultipartUploadRequest) (*AbortMultipartUploadResponse, error)
	CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResponse, error)
	ListFilesByParent(context.Context, *ListFilesByParentRequest) (*ListFilesByParentResponse, error)
	ToggleFavorite(context.Context, *ToggleFavoriteRequest) (*ToggleFavoriteResponse, error)
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	RestoreFile(context.Context, *RestoreFileRequest) (*RestoreFileResponse, error)
	Rename(context.Context, *RenameRequest) (*RenameResponse, error)
	MarkAsIsPublic(context.Context, *MarkAsIsPublicRequest) (*MarkAsIsPublicResponse, error)
	MarkAsNotIsPublic(context.Context, *MarkAsNotIsPublicRequest) (*MarkAsNotIsPublicResponse, error)
	AddAccessEmail(context.Context, *AddAccessEmailRequest) (*AddAccessEmailResponse, error)
	GetAccessStatus(context.Context, *GetAccessStatusRequest) (*GetAccessStatusResponse, error)
	RemoveSingleAccessEmail(context.Context, *RemoveSingleAccessEmailRequest) (*RemoveSingleAccessEmailResponse, error)
	RemoveAllAccessEmails(context.Context, *RemoveAllAccessEmailsRequest) (*RemoveAllAccessEmailsResponse, error)
	GetAccountSize(context.Context, *GetAccountSizeRequest) (*GetAccountSizeResponse, error)
	PermanentlyDeleteFile(context.Context, *PermanentlyDeleteFileRequest) (*PermanentlyDeleteFileResponse, error)
	ViewFile(context.Context, *ViewFileRequest) (*ViewFileResponse, error)
	mustEmbedUnimplementedFileServiceServer()
}

// UnimplementedFileServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFileServiceServer struct{}

func (UnimplementedFileServiceServer) InitiateMultipartUpload(context.Context, *InitiateMultipartUploadRequest) (*InitiateMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitiateMultipartUpload not implemented")
}
func (UnimplementedFileServiceServer) GetPresignedUploadPartURL(context.Context, *GetPresignedUploadPartURLRequest) (*GetPresignedUploadPartURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPresignedUploadPartURL not implemented")
}
func (UnimplementedFileServiceServer) CompleteMultipartUpload(context.Context, *CompleteMultipartUploadRequest) (*CompleteMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteMultipartUpload not implemented")
}
func (UnimplementedFileServiceServer) AbortMultipartUpload(context.Context, *AbortMultipartUploadRequest) (*AbortMultipartUploadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortMultipartUpload not implemented")
}
func (UnimplementedFileServiceServer) CreateFolder(context.Context, *CreateFolderRequest) (*CreateFolderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFileServiceServer) ListFilesByParent(context.Context, *ListFilesByParentRequest) (*ListFilesByParentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFilesByParent not implemented")
}
func (UnimplementedFileServiceServer) ToggleFavorite(context.Context, *ToggleFavoriteRequest) (*ToggleFavoriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleFavorite not implemented")
}
func (UnimplementedFileServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileServiceServer) RestoreFile(context.Context, *RestoreFileRequest) (*RestoreFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreFile not implemented")
}
func (UnimplementedFileServiceServer) Rename(context.Context, *RenameRequest) (*RenameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rename not implemented")
}
func (UnimplementedFileServiceServer) MarkAsIsPublic(context.Context, *MarkAsIsPublicRequest) (*MarkAsIsPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsIsPublic not implemented")
}
func (UnimplementedFileServiceServer) MarkAsNotIsPublic(context.Context, *MarkAsNotIsPublicRequest) (*MarkAsNotIsPublicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkAsNotIsPublic not implemented")
}
func (UnimplementedFileServiceServer) AddAccessEmail(context.Context, *AddAccessEmailRequest) (*AddAccessEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAccessEmail not implemented")
}
func (UnimplementedFileServiceServer) GetAccessStatus(context.Context, *GetAccessStatusRequest) (*GetAccessStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccessStatus not implemented")
}
func (UnimplementedFileServiceServer) RemoveSingleAccessEmail(context.Context, *RemoveSingleAccessEmailRequest) (*RemoveSingleAccessEmailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSingleAccessEmail not implemented")
}
func (UnimplementedFileServiceServer) RemoveAllAccessEmails(context.Context, *RemoveAllAccessEmailsRequest) (*RemoveAllAccessEmailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllAccessEmails not implemented")
}
func (UnimplementedFileServiceServer) GetAccountSize(context.Context, *GetAccountSizeRequest) (*GetAccountSizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountSize not implemented")
}
func (UnimplementedFileServiceServer) PermanentlyDeleteFile(context.Context, *PermanentlyDeleteFileRequest) (*PermanentlyDeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PermanentlyDeleteFile not implemented")
}
func (UnimplementedFileServiceServer) ViewFile(context.Context, *ViewFileRequest) (*ViewFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewFile not implemented")
}
func (UnimplementedFileServiceServer) mustEmbedUnimplementedFileServiceServer() {}
func (UnimplementedFileServiceServer) testEmbeddedByValue()                     {}

// UnsafeFileServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServiceServer will
// result in compilation errors.
type UnsafeFileServiceServer interface {
	mustEmbedUnimplementedFileServiceServer()
}

func RegisterFileServiceServer(s grpc.ServiceRegistrar, srv FileServiceServer) {
	// If the following call pancis, it indicates UnimplementedFileServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FileService_ServiceDesc, srv)
}

func _FileService_InitiateMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitiateMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).InitiateMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_InitiateMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).InitiateMultipartUpload(ctx, req.(*InitiateMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetPresignedUploadPartURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPresignedUploadPartURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetPresignedUploadPartURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetPresignedUploadPartURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetPresignedUploadPartURL(ctx, req.(*GetPresignedUploadPartURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CompleteMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CompleteMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_CompleteMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CompleteMultipartUpload(ctx, req.(*CompleteMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_AbortMultipartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbortMultipartUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AbortMultipartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_AbortMultipartUpload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AbortMultipartUpload(ctx, req.(*AbortMultipartUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_CreateFolder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).CreateFolder(ctx, req.(*CreateFolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ListFilesByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesByParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ListFilesByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_ListFilesByParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ListFilesByParent(ctx, req.(*ListFilesByParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ToggleFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleFavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ToggleFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_ToggleFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ToggleFavorite(ctx, req.(*ToggleFavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RestoreFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RestoreFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_RestoreFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RestoreFile(ctx, req.(*RestoreFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_Rename_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).Rename(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_Rename_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).Rename(ctx, req.(*RenameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_MarkAsIsPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsIsPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).MarkAsIsPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_MarkAsIsPublic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).MarkAsIsPublic(ctx, req.(*MarkAsIsPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_MarkAsNotIsPublic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkAsNotIsPublicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).MarkAsNotIsPublic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_MarkAsNotIsPublic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).MarkAsNotIsPublic(ctx, req.(*MarkAsNotIsPublicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_AddAccessEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddAccessEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).AddAccessEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_AddAccessEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).AddAccessEmail(ctx, req.(*AddAccessEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetAccessStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetAccessStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetAccessStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetAccessStatus(ctx, req.(*GetAccessStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RemoveSingleAccessEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSingleAccessEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RemoveSingleAccessEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_RemoveSingleAccessEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RemoveSingleAccessEmail(ctx, req.(*RemoveSingleAccessEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_RemoveAllAccessEmails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveAllAccessEmailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).RemoveAllAccessEmails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_RemoveAllAccessEmails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).RemoveAllAccessEmails(ctx, req.(*RemoveAllAccessEmailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_GetAccountSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccountSizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).GetAccountSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_GetAccountSize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).GetAccountSize(ctx, req.(*GetAccountSizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_PermanentlyDeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PermanentlyDeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).PermanentlyDeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_PermanentlyDeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).PermanentlyDeleteFile(ctx, req.(*PermanentlyDeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileService_ViewFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ViewFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileServiceServer).ViewFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileService_ViewFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileServiceServer).ViewFile(ctx, req.(*ViewFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FileService_ServiceDesc is the grpc.ServiceDesc for FileService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "file.v1.FileService",
	HandlerType: (*FileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitiateMultipartUpload",
			Handler:    _FileService_InitiateMultipartUpload_Handler,
		},
		{
			MethodName: "GetPresignedUploadPartURL",
			Handler:    _FileService_GetPresignedUploadPartURL_Handler,
		},
		{
			MethodName: "CompleteMultipartUpload",
			Handler:    _FileService_CompleteMultipartUpload_Handler,
		},
		{
			MethodName: "AbortMultipartUpload",
			Handler:    _FileService_AbortMultipartUpload_Handler,
		},
		{
			MethodName: "CreateFolder",
			Handler:    _FileService_CreateFolder_Handler,
		},
		{
			MethodName: "ListFilesByParent",
			Handler:    _FileService_ListFilesByParent_Handler,
		},
		{
			MethodName: "ToggleFavorite",
			Handler:    _FileService_ToggleFavorite_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileService_DeleteFile_Handler,
		},
		{
			MethodName: "RestoreFile",
			Handler:    _FileService_RestoreFile_Handler,
		},
		{
			MethodName: "Rename",
			Handler:    _FileService_Rename_Handler,
		},
		{
			MethodName: "MarkAsIsPublic",
			Handler:    _FileService_MarkAsIsPublic_Handler,
		},
		{
			MethodName: "MarkAsNotIsPublic",
			Handler:    _FileService_MarkAsNotIsPublic_Handler,
		},
		{
			MethodName: "AddAccessEmail",
			Handler:    _FileService_AddAccessEmail_Handler,
		},
		{
			MethodName: "GetAccessStatus",
			Handler:    _FileService_GetAccessStatus_Handler,
		},
		{
			MethodName: "RemoveSingleAccessEmail",
			Handler:    _FileService_RemoveSingleAccessEmail_Handler,
		},
		{
			MethodName: "RemoveAllAccessEmails",
			Handler:    _FileService_RemoveAllAccessEmails_Handler,
		},
		{
			MethodName: "GetAccountSize",
			Handler:    _FileService_GetAccountSize_Handler,
		},
		{
			MethodName: "PermanentlyDeleteFile",
			Handler:    _FileService_PermanentlyDeleteFile_Handler,
		},
		{
			MethodName: "ViewFile",
			Handler:    _FileService_ViewFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file/v1/file.proto",
}
